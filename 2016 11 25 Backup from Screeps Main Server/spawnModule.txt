/*
 * Module code goes here. Use 'module.exports' to export things:
 * module.exports = 'a thing';
 *
 * You can import it from another modules like this:
 * var mod = require('spawnModule'); // -> 'a thing'
 */
 
module.exports = function(spawnBuilding)
{
    /*
    if (spawnBuilding.name == "Spawn2")
    {
        console.log("Hi");
    }
    */
    
    //console.log(spawnBuilding.room.name);
    //initialize the memory control
    
    //console.log(spawnBuilding.room.name);
    
    //Desired Population Number
    var transferLimit = 1;
    var minerLimit = 2;
    var truckLimit = 2;
    var buildLimit = 1;
    var upgradeLimit = 1;
    var armyLimit = 0;
    var controlLimit = 0;
    var repairLimit = 1;
    var testLimit = 0;
    var wallRepairLimit = 0;
    
    //if there is no building to repair, no repair units
    var buildingMaxHealth = 0;
    
    
    
    if (Memory.rooms[spawnBuilding.room.name] === undefined)
    {
        console.log("FUck you");
        console.log(Memory.rooms[spawnBuilding.room.name]  + spawnBuilding.room.name);
        if (Memory.rooms[spawnBuilding.room.name].transferLimit === undefined)
        {
            Memory.rooms[spawnBuilding.room.name].transferLimit = 1;
            console.log("Setting tfLimit " + spawnBuilding.room.name + " to " + Memory.rooms[spawnBuilding.room.name].transferLimit);
            
            
        }
        if (Memory.rooms[spawnBuilding.room.name].minerLimit === undefined)
        {
            Memory.rooms[spawnBuilding.room.name].minerLimit = 2;
        }
        if (Memory.rooms[spawnBuilding.room.name].truckLimit === undefined)
        {
            Memory.rooms[spawnBuilding.room.name].truckLimit = 2;
        }
        if (Memory.rooms[spawnBuilding.room.name].buildLimit === undefined)
        {
            Memory.rooms[spawnBuilding.room.name].buildLimit = 1;
        }
        if (Memory.rooms[spawnBuilding.room.name].upgradeLimit === undefined)
        {
            Memory.rooms[spawnBuilding.room.name].upgradeLimit = 2;
        }
        if (Memory.rooms[spawnBuilding.room.name].armyLimit === undefined)
        {
            Memory.rooms[spawnBuilding.room.name].armyLimit = 0;
        }
        if (Memory.rooms[spawnBuilding.room.name].controlLimit === undefined)
        {
            Memory.rooms[spawnBuilding.room.name].controlLimit = 0;
        }
        if (Memory.rooms[spawnBuilding.room.name].repairLimit === undefined)
        {
            Memory.rooms[spawnBuilding.room.name].repairLimit = 1;
        }
        if (Memory.rooms[spawnBuilding.room.name].testLimit === undefined)
        {
            Memory.rooms[spawnBuilding.room.name].testLimit = 0;
        }
        if (Memory.rooms[spawnBuilding.room.name].buildingMaxHealth === undefined)
        {
            Memory.rooms[spawnBuilding.room.name].buildingMaxHealth = 10000;
        }
        if (Memory.rooms[spawnBuilding.room.name].defenceMode === undefined)
        {
            Memory.rooms[spawnBuilding.room.name].defenceMode = 1;
        }
        if (Memory.rooms[spawnBuilding.room.name].wallRepairLimit === undefined)
        {
            Memory.rooms[spawnBuilding.room.name].wallRepairLimit = 1;
        }
        
        transferLimit = Memory.rooms[spawnBuilding.room.name].transferLimit;
        minerLimit = Memory.rooms[spawnBuilding.room.name].minerLimit;
        truckLimit = Memory.rooms[spawnBuilding.room.name].truckLimit;
        buildLimit = Memory.rooms[spawnBuilding.room.name].buildLimit;
        upgradeLimit = Memory.rooms[spawnBuilding.room.name].upgradeLimit;
        armyLimit = Memory.rooms[spawnBuilding.room.name].armyLimit;
        controlLimit = Memory.rooms[spawnBuilding.room.name].controlLimit;
        repairLimit = Memory.rooms[spawnBuilding.room.name].repairLimit;
        testLimit = Memory.rooms[spawnBuilding.room.name].testLimit;
        wallRepairLimit = Memory.rooms[spawnBuilding.room.name].wallRepairLimit;
        
        buildingMaxHealth = Memory.rooms[spawnBuilding.room.name].buildingMaxHealth;
    }
    else if (!(Memory.rooms[spawnBuilding.room.name].transferLimit === undefined))
    {
        transferLimit = Memory.rooms[spawnBuilding.room.name].transferLimit;
        minerLimit = Memory.rooms[spawnBuilding.room.name].minerLimit;
        truckLimit = Memory.rooms[spawnBuilding.room.name].truckLimit;
        buildLimit = Memory.rooms[spawnBuilding.room.name].buildLimit;
        upgradeLimit = Memory.rooms[spawnBuilding.room.name].upgradeLimit;
        armyLimit = Memory.rooms[spawnBuilding.room.name].armyLimit;
        controlLimit = Memory.rooms[spawnBuilding.room.name].controlLimit;
        repairLimit = Memory.rooms[spawnBuilding.room.name].repairLimit;
        testLimit = Memory.rooms[spawnBuilding.room.name].testLimit;
        wallRepairLimit = Memory.rooms[spawnBuilding.room.name].wallRepairLimit;
        
        buildingMaxHealth = Memory.rooms[spawnBuilding.room.name].buildingMaxHealth;
        
        
    }
    else
    {
        console.log("Room " + spawnBuilding.room.name);
        //Memory.rooms[spawnBuilding.room.name].test = "foo";
    }

    /*
    var transferModule = require('transferModule');
    var minerModule = require('minerModule');
    var truckModule = require('truckModule');
    var buildModule = require('buildModule');
    var upgradeModule = require('upgradeModule');
    var armyModule = require('armyModule');
    var controlModule = require('controlModule');
    
    var testModule = require('testModule');
    */
    var linkModule = require('linkModule');
    var repairModule = require('repairModule');
    
    
    
    var linkBuilding = spawnBuilding.room.find(FIND_MY_STRUCTURES, 
    {
        filter: { structureType: STRUCTURE_LINK}
    });
    
    if (linkBuilding[0])
    {
        linkModule(spawnBuilding);
    }
    
    var analysisModule = require('analysisModule');
    //analysisModule(spawnBuilding);
    
    if (spawnBuilding.room.storage && spawnBuilding.room.storage.store.energy < spawnBuilding.room.storage.storeCapacity / 2)
    {
        wallRepairLimit = 0;
    }
    
    
    
    //console.log(spawnBuilding.room.storage.energyCapacity / 3);
    
    if(!(spawnBuilding.room.storage === undefined) && spawnBuilding.room.storage.store.energy > spawnBuilding.room.storage.storeCapacity / 2)
    {
        //console.log("Hello");
        upgradeLimit += 1;
    }
    
    var hostileCreeps = spawnBuilding.room.find(FIND_HOSTILE_CREEPS, 
    {
        filter:function(object)
        {
            if(object.owner.username == "TooAngel")
            {
                return false;
            }
            else
            {
                return true;
            }
        }
    });
    
    if (hostileCreeps.length > 0)
    {
        Game.notify("Enemy Spotted. " + hostileCreeps.length + " creeps from " + hostileCreeps[0].owner.username + " in " + spawnBuilding.room.name);
        armyLimit += 1;
    }
    
    
    //if there is no construction sites, no building units
    var constSites = spawnBuilding.room.find(FIND_CONSTRUCTION_SITES);
    if (constSites[0])
    {
    }
    else
    {
        buildLimit = 0;
    }
    
    
    
    var repairBuildings = spawnBuilding.room.find(FIND_STRUCTURES, 
    {
        filter : function(object)
        {
            if (object.hits >= object.hitsMax)
            {
                return false;
            }
            else if (object.hits >= buildingMaxHealth && object.structureType != STRUCTURE_ROAD)
            {
                return false;
            }
            else
            {
                //console.log(object.pos.x + " " + object.pos.y);
                return true;
            }
        }
    });
    if (repairBuildings[0])
    {
    }
    else
    {
        repairLimit = 0;
    }
    
    //make transfer creep only if there is a storage and empty extentions
    var storageBuilding = spawnBuilding.room.storage;
    
    

    if (storageBuilding)
    {
        var emptyExtentions = spawnBuilding.room.find(FIND_MY_STRUCTURES,
        {
            filter: function(object)
            {
                if (object.structureType == STRUCTURE_EXTENSION && object.energy == 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        });
        
        if (emptyExtentions.length > 0)
        {
            if (transferLimit <= 0)
            {
                transferLimit = 1;
            }
        }
        else
        {
            transferLimit = 0;
        }
    }
    else
    {
        transferLimit = 0;
    }
    
    
    
    
    var transferCount = 0;
    var minerCount = 0;
    var truckCount = 0;
    var buildCount = 0;
    var upgradeCount = 0;
    var armyCount = 0;
    var controlCount = 0;
    var repairCount = 0;
    var testCount = 0;
    var wallRepairCount = 0;
    
    
    //Count all types of creeps
    //for(var name in Game.creeps) 
    var creepsInTheRoom = spawnBuilding.room.find(FIND_MY_CREEPS);
    
    for(var index in creepsInTheRoom)
    {
        //console.log(name);
    	//var creep = Game.creeps[name];
    	
    	var creepRole = Memory.creeps[creepsInTheRoom[index].name].role;
    
        if (creepRole == 'transfer')
    	{
    	    transferCount++;
    	}	
    	else if (creepRole == 'miner')
    	{
    	    minerCount++;
    	}
    	//trucks only pick up from miner, not from ground
    	else if (creepRole == 'truck')
    	{
    	    truckCount++;
    	}
    	else if (creepRole == 'build')
    	{
    	    buildCount++;
    	}
    	else if (creepRole == 'upgrade')
    	{
    	    upgradeCount++;
    	}
    	else if (creepRole == 'army')
    	{
    	    armyCount++;
    	}
    	else if (creepRole == 'control')
    	{
    	    controlCount++;
    	}
    	else if (creepRole == 'repair')
    	{
    	    repairCount++;
    	}
    	else if (creepRole == 'test')
    	{
    	    testCount++;
    	}
    	else if (creepRole == 'wallRepair')
    	{
    	    wallRepairCount++;
    	}
    }
    
    //Game.creeps['Kayla'].say(buildCount);
    //console.log(spawnBuilding.name + " " + truckLimit);
    
    //create more creeps as needed
    
    
    var bodyCount = 1;
    
    //6 work parts actually can mine out
    //var minerBody = [WORK, WORK, WORK, WORK, WORK, WORK, CARRY, CARRY, CARRY, CARRY, MOVE];
    var minerBody = [MOVE, CARRY];
    
    //1 move necessary, work and carry scale
    
    var BuildingEnergy = spawnBuilding.room.energyAvailable;
    var isUnderEnergyLimit = true;
    
    //400 is the minimum amount needed to make a miner
    if (spawnBuilding.room.energyAvailable > 400)
    {
        //BuildingEnergy = BuildingEnergy / 2;
        //isUnderEnergyLimit = false;
    }
    //console.log(BuildingEnergy);
    
    var minerFactor = (BuildingEnergy - 100)/100;
    if (!isUnderEnergyLimit)
    {
        minerFactor =  (BuildingEnergy*2 - 100)/100;
    }
    
    //var transferBody = [CARRY, MOVE];
    var transferBody = [];
    var transferFactor = BuildingEnergy / 100;
    
    //var truckBody = [CARRY, CARRY, CARRY, CARRY, CARRY, CARRY, CARRY, CARRY, CARRY, CARRY, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE];
    var truckBody = [];
    var truckFactor = (BuildingEnergy) / 100;
    //var buildBody = [WORK, WORK, WORK, WORK, CARRY, CARRY, MOVE, MOVE];
    var buildBody = [];
    var buildFactor = (BuildingEnergy) / 200;
    //var upgradeBody = [WORK, WORK, WORK, WORK, WORK, WORK, CARRY, CARRY, CARRY, CARRY, MOVE, MOVE];
    //var upgradeBody = [];
    var upgradeBody = [MOVE];
    //var upgradeFactor = (BuildingEnergy) / 200;
    var upgradeFactor = (BuildingEnergy - 50) / 150;
    //var armyBody = [ATTACK, ATTACK, RANGED_ATTACK, RANGED_ATTACK, TOUGH, TOUGH, TOUGH, TOUGH, TOUGH, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE];
    var armyBody = [];
    var armyFactor = (BuildingEnergy) / 200;
    //var controlBody = [WORK, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE];
    var controlBody = [];
    var controlFactor = BuildingEnergy / 50;
    
    var repairFactor = BuildingEnergy / 200;
    var repairBody = [];
    
    //var testBody = [WORK, WORK, CARRY, CARRY, MOVE, MOVE, MOVE, MOVE];
    var testBody = [];
    var testFactor = BuildingEnergy / 200;
    
    var wallRepairBody = [];
    var wallRepairFactor = (BuildingEnergy) / 200;
    
    
    //console.log(minerFactor);
    
    for (bodyCount = 1; bodyCount <= transferFactor; bodyCount++)
    {
        if (bodyCount > 50/2)
        {
            break;
        }
        transferBody.push(MOVE);
        transferBody.push(CARRY);
    }
    for (bodyCount = 1; bodyCount <= minerFactor; bodyCount++)
    {
        //source can only supply up to 5 working parts
        //theoretically... but i'm gonna put 6 anyway
        if (bodyCount > 6)
        {
            break;
        }
        minerBody.push(WORK);
        //minerBody.push(CARRY);
    }
    for (bodyCount = 1; bodyCount <= truckFactor; bodyCount++)
    {
        if (bodyCount > 50/2)
        {
            break;
        }
        truckBody.push(MOVE);
        truckBody.push(CARRY);
    }
    for (bodyCount = 1; bodyCount <= buildFactor; bodyCount++)
    {
        if (bodyCount > 50/3)
        {
            break;
        }
        buildBody.push(MOVE);
        buildBody.push(CARRY);
        buildBody.push(WORK);
    }
    //10 is the max. so i keep it at 9
    for (bodyCount = 1; bodyCount <= upgradeFactor; bodyCount++)
    {
        if (bodyCount > 9)
        {
            break;
        }
        //upgradeBody.push(MOVE);
        upgradeBody.push(CARRY);
        upgradeBody.push(WORK);
    }
    for (bodyCount = 1; bodyCount <= repairFactor; bodyCount++)
    {
        if (bodyCount > 50/3)
        {
            break;
        }
        repairBody.push(MOVE);
        repairBody.push(CARRY);
        repairBody.push(WORK);
    }
    for (bodyCount = 1; bodyCount <= armyFactor; bodyCount++)
    {
        if (bodyCount > 50/2)
        {
            break;
        }
        armyBody.push(MOVE);
        armyBody.push(RANGED_ATTACK);
    }
    for (bodyCount = 1; bodyCount <= testFactor; bodyCount++)
    {
        if (bodyCount > 50/3)
        {
            break;
        }
        testBody.push(MOVE);
        testBody.push(CARRY);
        testBody.push(WORK);
    }
    for (bodyCount = 1; bodyCount <= controlFactor; bodyCount++)
    {
        if (bodyCount > 50)
        {
            break;
        }
        controlBody.push(MOVE);
    }
    for (bodyCount = 1; bodyCount <= wallRepairFactor; bodyCount++)
    {
        if (bodyCount > 50/3)
        {
            break;
        }
        wallRepairBody.push(MOVE);
        wallRepairBody.push(CARRY);
        wallRepairBody.push(WORK);
    }
    
    
    //Hank. Fuck this bug
    /*
    if (spawnBuilding.room.name == "E12S1")
    {
        transferBody = [CARRY, MOVE];
        minerBody = [WORK, MOVE, CARRY];
        truckBody = [MOVE, CARRY];
        buildBody = minerBody;
        upgradeBody = minerBody;
        repairBody = minerBody;
        armyBody = [RANGED_ATTACK, MOVE];
        
    }
    */
    
    //console.log(spawnBuilding.room.name + " " + minerBody);
    
    
    
    //Emergency response. If all miners and trucks are dead, start using the storage
    /*
    if (minerCount == 0 && truckCount == 0)
    {
        transferLimit = 1;
    }
    */
    
    //console.log(controlLimit + spawnBuilding.room.name);
    
    if (spawnBuilding.room.controller.my)
    {
        
        
        if (transferCount < transferLimit)
        {
            
            //transferBody = [MOVE, CARRY];
            
            
            if (transferFactor >= 1)
            {
            
                var name = spawnBuilding.createCreep(transferBody);
            
            
                
                
                if (name != -6 && name != -4 && name != -10)
                {
                    Memory.creeps[name].role = 'transfer';
                    Memory.creeps[name].job = 'collect';
                }
                else if (name == -10)
                {
                    console.log("Issue: " + transferBody);
                    console.log(spawnBuilding.room.name);
                }
            }
        }
        else if (minerCount == 0)
        {
            //if for some reason there is no energy, make the basic creeps
            /*
            if (spawnBuilding.room.energyAvailable <= 300)
            {
                minerBody = [WORK, CARRY, MOVE];
            }
            else
            {
                console.log(spawnBuilding.room.energyAvailable);
            }
            */
            
            
            if (minerFactor >= 1)
            {
                var name = spawnBuilding.createCreep(minerBody);
                
                console.log(spawnBuilding.room.name + " " +spawnBuilding.canCreateCreep(minerBody));
        
                if (name != -6 && name != -4)
                {
                    Memory.creeps[name].role = 'miner';
                }
            }
        }
        else if (truckCount == 0)
        {
            /*
            if (spawnBuilding.room.energyAvailable <= 300)
            {
                truckBody = [CARRY, MOVE];
            }
            */
            
            if (truckFactor >= 1)
            {
                var name = spawnBuilding.createCreep(truckBody);
                
                if (name != -6 && name != -4)
                {
                    Memory.creeps[name].role = 'truck';
                    Memory.creeps[name].job = 'collect';
                }
            }
        }
        else if (minerCount < minerLimit)
        {
            /*
            if (spawnBuilding.room.energyAvailable <= 300)
            {
                minerBody = [WORK, CARRY, MOVE];
            }
            
            var name = spawnBuilding.createCreep(minerBody);
            if (name != -6 && name != -4)
            {
                Memory.creeps[name].role = 'miner';
            }
            */
            
            if (minerFactor >= 1)
            {
                
                var name = spawnBuilding.createCreep(minerBody);
        
                if (name != -6 && name != -4)
                {
                    Memory.creeps[name].role = 'miner';
                }
            }
        }
        else if (truckCount < truckLimit)
        {
            /*
            if (spawnBuilding.room.energyAvailable <= 300)
            {
                truckBody = [CARRY, MOVE];
            }
            */
            
            if(truckFactor >= 1)
            {
            
                var name = spawnBuilding.createCreep(truckBody);
                if (name != -6 && name != -4)
                {
                    Memory.creeps[name].role = 'truck';
                    Memory.creeps[name].job = 'collect';
                }
            }
        }
        else if (buildCount < buildLimit)
        {
            /*
            if (spawnBuilding.room.energyAvailable < 300)
            {
                buildBody = [WORK, CARRY, MOVE];
            }
            */
            
            
            
            if (buildFactor >= 1)
            {
                var name = spawnBuilding.createCreep(buildBody);
            
                if (name != -6 && name != -4)
                {
                    Memory.creeps[name].role = 'build';
                }
            }
        }
        else if (upgradeCount < upgradeLimit)
        {
            /*
            if (spawnBuilding.room.energyAvailable < 300)
            {
                upgradeBody = [WORK, CARRY, MOVE];
            }
            */
            
            
            
            if (upgradeFactor >= 1)
            {
                var name = spawnBuilding.createCreep(upgradeBody);
                if (name != -6 && name != -4)
                {
                    Memory.creeps[name].role = 'upgrade';
                    Memory.creeps[name].job = 'collect';
                }
            }
        }
        else if (armyCount < armyLimit)
        {
            if (armyFactor >= 1)
            {
                var name = spawnBuilding.createCreep(armyBody);
                if (name != -6 && name != -4)
                {
                    Memory.creeps[name].role = 'army';
                }
            }
        }
        else if (controlCount < controlLimit)
        {
            var name = spawnBuilding.createCreep(controlBody);
        
            if (controlFactor >= 1)
            {
                if (name != -6 && name != -4)
                {
                    Memory.creeps[name].role = 'control';
                    Memory.room[spawnBuilding.room.name].controlLimit = 0;
                }
            }
        }
        else if (repairCount < repairLimit)
        {
            var name = spawnBuilding.createCreep(repairBody);
            //console.log(name);
            //console.log(repairBody);
            if (repairFactor >= 1)
            {
                if (name != -6 && name != -4 && name != -10)
                {
                    Memory.creeps[name].role = 'repair';
                }
            }
        }
        else if (testCount < testLimit)
        {
            var name = spawnBuilding.createCreep(testBody);
            
            if (testFactor >= 1)
            {
                if (name != -6 && name != -4)
                {
                    Memory.creeps[name].role = 'test';
                }
            }
        }
        else if (wallRepairCount < wallRepairLimit)
        {
            var name = spawnBuilding.createCreep(wallRepairBody);
            
        
            if (wallRepairFactor >= 1)
            {
                if (name != -6 && name != -4 )
                {
                    Memory.creeps[name].role = 'wallRepair';
                }
            }
        }
    }
    
    
    //activate the creeps
    
    //creepsInTheRoom = spawnBuilding.room.find(FIND_MY_CREEPS);
    
    
    //activate all the creeps at once
    
    for(var index in creepsInTheRoom)
    {
        //var creep = Game.creeps[name];
        var creep = creepsInTheRoom[index];
    
        if (Memory.creeps[creep.name].role == 'miner')
        {
        //    minerModule(creep);
        }
        else if (Memory.creeps[creep.name].role == 'truck')
        {
        //    truckModule(creep);
        }
        else if (Memory.creeps[creep.name].role == 'build')
        {
        //    buildModule(creep);
        }
        else if (Memory.creeps[creep.name].role == 'upgrade')
        {
        //    upgradeModule(creep);
        }
        else if (Memory.creeps[creep.name].role == 'army')
        {
        //    armyModule(creep);
        }
        else if (Memory.creeps[creep.name].role == 'transfer')
        {
        //    transferModule(creep);
        }
        else if (Memory.creeps[creep.name].role == 'control')
        {
        //    controlModule(creep);
        }
        else if (Memory.creeps[creep.name].role == 'repair')
        {
            repairModule(creep, buildingMaxHealth);
        }
        else if (Memory.creeps[creep.name].role == 'test')
        {
        //    testModule(creep);
        }
    }
}